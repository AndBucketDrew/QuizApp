[
    {
      "questionText": "Welche Aussage trifft für Laufzeitumgebung für Javascript zu?",
      "options": [
        "Eine Laufzeitumgebung ist die Umgebung in der das Programm (der Javascript‐Code) ausgeführt wird.",
        "Laufzeitumgebungen für Javascript sind ausschließlich im Browser verfügbar.",
        "Die Laufzeitumgebung stellt dem Javascript‐Interpreter eine bestimmte Zeit zum Ausführen des Javascript‐Codes zur Verfügung.",
        "Die Umgebung in der man Javascript‐Code schreibt, nennt man Laufzeitumgebung."
      ],
      "correctAnswers": [
        "Eine Laufzeitumgebung ist die Umgebung in der das Programm (der Javascript‐Code) ausgeführt wird."
      ]
    },
    {
      "questionText": "Welche allgemeinen Aussagen sind richtig?",
      "options": [
        "NodeJS ist eine Laufzeitumgebung für Javascript.",
        "Full‐Stack‐Javascript Anwendungen haben Javascript am Client und am Server im Einsatz.",
        "Javascript wird von der Laufzeitumgebung kompiliert bevor es ausgeführt wird.",
        "Javascript kann nur im Browser oder in NodeJS verwendet werden."
      ],
      "correctAnswers": [
        "NodeJS ist eine Laufzeitumgebung für Javascript.",
        "Full‐Stack‐Javascript Anwendungen haben Javascript am Client und am Server im Einsatz."
      ]
    },
    {
        "questionText": "Was ist eine Javascript Laufzeitumgebung?",
        "options": [
          "NodeJS",
          "V8",
          "Angular",
          "ReactJS"
        ],
        "correctAnswers": [
          "NodeJS",
          "V8"
        ]
      },
      {
        "questionText": "Welche Unterschiede gibt es zwischen Javascript und Typescript?",
        "options": [
          "Typescript wird kompiliert, Javascript wird interpretiert.",
          "Variablen in Javascript sind typlos, in Typescript sind sie typsicher.",
          "Javascript wird in allen Browsern unterstützt, Typescript ist von Microsoft und kann daher nur im Edge Browser verwendet werden.",
          "Mit Typescript können größere Projekte und komplexere Probleme gelöst werden. Javascript ist nur für kleine Webanwendungen geeignet."
        ],
        "correctAnswers": [
          "Typescript wird kompiliert, Javascript wird interpretiert.",
          "Variablen in Javascript sind typlos, in Typescript sind sie typsicher.",
          "Mit Typescript können größere Projekte und komplexere Probleme gelöst werden. Javascript ist nur für kleine Webanwendungen geeignet."
        ]
      },
      {
        "questionText": "Welcher Aussage zu Browser, Browserengine und Javascript‐Engine ist bzw. sind richtig?",
        "options": [
          "Gecko‐basierte Browser verwenden SpiderMonkey als Javascript‐Engine",
          "Webkit‐basierte Browser nutzen JavascriptCore oder V8 als Javascript‐Engine.",
          "NodeJS basiert auf der V8 Javascript‐Engine.",
          "Edge Browser nutzen Trident als Javascript‐Engine."
        ],
        "correctAnswers": [
          "Gecko‐basierte Browser verwenden SpiderMonkey als Javascript‐Engine",
          "Webkit‐basierte Browser nutzen JavascriptCore oder V8 als Javascript‐Engine.",
          "NodeJS basiert auf der V8 Javascript‐Engine."
        ]
      },
      {
        "questionText": "Was ist NodeJS?",
        "options": [
          "eine plattformunabhängige Javascript‐Laufzeitumgebung",
          "eine Weiterentwicklung von Javascript",
          "ein Javascript‐Interpreter für Webserver",
          "eine neue Version von Javascript"
        ],
        "correctAnswers": [
          "eine plattformunabhängige Javascript‐Laufzeitumgebung"
        ]
      },
      {
        "questionText": "Wofür wird NodeJS primär eingesetzt?",
        "options": [
          "um asynchrone skalierbare Netzwerk‐Applikationen zu entwickeln",
          "um browserunabhängige Webapplikationen zu entwickeln",
          "um Javascript‐Anwendungen mit Datenbankzugriffen zu entwickeln",
          "um Desktopapplikationen mit Javascript zu entwickeln"
        ],
        "correctAnswers": [
          "um asynchrone skalierbare Netzwerk‐Applikationen zu entwickeln"
        ]
      },
      {
        "questionText": "Wie führen Sie (typischerweise) eine Javascript‐Anwendung mit NodeJS aus?",
        "options": [
          "über eine CLI (Terminal) und den Befehl node",
          "durch Einbetten des Codes in eine HTML Datei und öffnen dieser im Browser",
          "durch Starten der Desktop‐Applikation NodeJS",
          "mittels Aufruf der Anwendung über cURL"
        ],
        "correctAnswers": [
          "über eine CLI (Terminal) und den Befehl node"
        ]
      },
      {
        "questionText": "Wie werden Ausgaben aus NodeJS „sichtbar“?",
        "options": [
          "im Terminal mittels console.log()",
          "durch Beschreiben von Dateien im Filesystem",
          "durch Ausgabe in Node‐Elementen im SOM (server object model)",
          "durch Verwendung der Funktion alert()"
        ],
        "correctAnswers": [
          "im Terminal mittels console.log()",
          "durch Beschreiben von Dateien im Filesystem"
        ]
      },
      {
        "questionText": "Wie werden Node‐Module verwendet?",
        "options": [
          "Module werden integriert mit require() oder import",
          "sobald sie in node_modules enthalten sind, sind die Funktionen global verfügbar",
          "mittels <script src=“...“> werden Module in das Hauptscript eingebettet",
          "mittels @import können beliebig viele Javascript‐Dateien angefügt werden."
        ],
        "correctAnswers": [
          "Module werden integriert mit require() oder import"
        ]
      },
      {
        "questionText": "Wofür steht NPM?",
        "options": [
          "Node Package Manager",
          "North Pole Mysteries",
          "NodeJS Power Management",
          "Nighttime Peanut Migrations"
        ],
        "correctAnswers": [
          "Node Package Manager"
        ]
      },
      {
        "questionText": "Welcher Befehl erstellt eine package.json Datei?",
        "options": [
          "npm init",
          "npm i",
          "npm create package.json",
          "npx create app"
        ],
        "correctAnswers": [
          "npm init"
        ]
      },
      {
        "questionText": "Wie lautet der Befehl um Module downzuloaden und in die package.json einzutragen?",
        "options": [
          "npm install ...",
          "node module add ...",
          "npm load ...",
          "npm i –local ..."
        ],
        "correctAnswers": [
          "npm install ..."
        ]
      },
      {
        "questionText": "Wozu wird --save-dev beim Installieren von Packages verwendet?",
        "options": [
          "Damit werden packages als devDependencies eingetragen, diese werden beim Deploying nicht mitgegeben",
          "Damit beim Installieren des Packages die sicherste Version verwendet wird",
          "Es wird zusätzlich zum Namen des Packages auch die Versionsnummer in die package.json eingetragen.",
          "Der aktuelle Projektstand wird vor dem Installieren gesichert."
        ],
        "correctAnswers": [
          "Damit werden packages als devDependencies eingetragen, diese werden beim Deploying nicht mitgegeben"
        ]
      },
      {
        "questionText": "In ihrer package.json findet sich nachfolgender Code. Wie können Sie das Script server_demo.js ohne der Verwendung von nodemon starten?",
        "options": [
          "node server_demo.js",
          "npm start",
          "npm run demo",
          "npm run demo ‐nodemon"
        ],
        "correctAnswers": [
          "node server_demo.js"
        ]
      },
      {
        "questionText": "Welchen Befehl können Sie unter NodeJS nutzen um den Inhalt einer Datei einzulesen?",
        "options": [
          "fs.readFile()",
          "fs.readFileSync()",
          "fs.promises.readFile()",
          "fs.promises.readFileSync()"
        ],
        "correctAnswers": [
          "fs.readFile()",
          "fs.readFileSync()",
          "fs.promises.readFile()"
        ]
      },
      {
        "questionText": "Welche Parameter hat die Callbackfunktion bei fs.readFile()?",
        "options": [
          "error, data",
          "options, data",
          "path, data",
          "event, data"
        ],
        "correctAnswers": [
          "error, data"
        ]
      },
      {
        "questionText": "Was passiert bei folgendem Code, wenn die Datei „test.txt“ nicht existiert?",
        "options": [
          "Es wird eine Datei test.txt erstellt, in der das Wort TEST steht.",
          "Es wird eine leere Datei test.txt erstellt.",
          "In der Konsole steht „Fehler“ sonst passiert nichts.",
          "Es kommt zu einer Exception und das Script bricht ab."
        ],
        "correctAnswers": [
          "Es wird eine Datei test.txt erstellt, in der das Wort TEST steht."
        ]
      },
      {
        "questionText": "Welche Dateien können mit readFile() eingelesen werden?",
        "options": [
          "alle",
          "nur Dateien mit einem textähnlichen MIME‐Type",
          "alle gängigen Textdateien, jedoch keine Bilder, Videos oder Audiodateien",
          "alle Dateiformate, die im OS definiert sind"
        ],
        "correctAnswers": [
          "alle"
        ]
      },
      {
        "questionText": "Mit welchem Befehl können neue Dateiordner erzeugt werden?",
        "options": [
          "fs.mkdir()",
          "fs.createDirectory()",
          "fs.writeFile() ... also option muss jedoch { directory:true } übergeben werden",
          "fs.addDir()"
        ],
        "correctAnswers": [
          "fs.mkdir()"
        ]
      },
      {
        "questionText": "Welcher Befehl erzeugt eine „Webserver“‐Applikation im NodeJS?",
        "options": [
          "http.createServer( ()=>{ }).listen( 8080 );",
          "http.app.listen( 8080 );",
          "http(8080).then( ()=>{ } );",
          "http.request( ()=>{ } ).response( ()=> { });"
        ],
        "correctAnswers": [
          "http.createServer( ()=>{ }).listen( 8080 );"
        ]
      },
      {
        "questionText": "Welche Parameter hat die Callback‐Funktion der Methode http.createServer()?",
        "options": [
          "request, response",
          "resolve, reject",
          "event, options",
          "success, error"
        ],
        "correctAnswers": [
          "request, response"
        ]
      },
      {
        "questionText": "Wie können Sie den HTTP Statuscode eines HTTP‐Requests definieren, wenn sie den http‐Server mit folgendem Code erzeugt haben? var http = require(\"http\"); http.createServer(function (req, res) { res.end(\"Hello World!\"); }).listen(8080);",
        "options": [
          "innerhalb der Callbackfunktion mit res.writeHead( 200 )",
          "innerhalb der Callbackfunktion mit res.status( 200 )",
          "mit Methodchaining an listen() anhängen mit .status( 200 )",
          "innerhalb der Callbackfunktion mit req.status( 200 )"
        ],
        "correctAnswers": [
          "innerhalb der Callbackfunktion mit res.writeHead( 200 )"
        ]
      },
      {
        "questionText": "Wie können Sie auf verschiedene angefragte URLs unterschiedliche Antworten schicken (HTTP Response)? Im Beispiel soll http://localhost:8080/hello das Wort „Hello“ und http://localhost:8080/world das Wort „World“ liefern. var http = require(\"http\"); http.createServer(function (req, res) { /* fehlender Code */ }).listen(8080);",
        "options": [
          "if ( req.url == \"/hello\" ) { res.end( \"Hello\" ); } if ( req.url == \"/world\" ) { res.end( \"World\" ); }",
          "if ( req.url == \"hello\" ) { res.end( \"Hello\" ); } if ( req.url == \"world\" ) { res.end( \"World\" ); }",
          "if ( req.url == \"http://localhost:8080/hello\" ) { res.end( \"Hello\" ); } if ( req.url == \"http://localhost:8080/world\" ) { res.end( \"World\" ); }",
          "if ( req == \"hello\" ) { res.end(\"Hello\"); } if ( req == \"world\" ) { res.end( \"World\" ); }"
        ],
        "correctAnswers": [
          "if ( req.url == \"/hello\" ) { res.end( \"Hello\" ); } if ( req.url == \"/world\" ) { res.end( \"World\" ); }"
        ]
      },
      {
        "questionText": "Wie lautet eine gültige URL für eine Websocket‐Verbindung?",
        "options": [
          "wss://testserver.at:443",
          "http://testserver.at:80",
          "https://testserver.at/wss:443",
          "websocks://testserver.at:443/socket"
        ],
        "correctAnswers": [
          "wss://testserver.at:443"
        ]
      },
      {
        "questionText": "Was ist der Unterschied zwischen einer Websocket Kommunikation zu einer HTTP Kommunikation?",
        "options": [
          "Bei einer HTTP Kommunikation stellt der Client eine Anfrage an den Server, die dieser beantwortet. Bei Websocket wird eine Verbindung erstellt, über welche der Client aber auch der Server beliebig Daten schicken können.",
          "Es wird die URL mit ws:// statt mit http:// geschrieben, sonst bleibt alles gleich.",
          "Bei einer HTTP Kommunikation werden üblicherweise Dateien übermittelt bei Websockets nur Datenpakete.",
          "Bei einer HTTP Verbindung bleibt eine permanente Verbindung zwischen Client und Server aufrecht, wobei bei Websockets Verbindungen nur für den Datenaustausch erzeugt werden."
        ],
        "correctAnswers": [
          "Bei einer HTTP Kommunikation stellt der Client eine Anfrage an den Server, die dieser beantwortet. Bei Websocket wird eine Verbindung erstellt, über welche der Client aber auch der Server beliebig Daten schicken können."
        ]
      },
      {
        "questionText": "Was ist unbedingt notwendig, bevor über eine Websocket‐Verbindung Daten ausgetauscht werden können?",
        "options": [
          "Es muss einen initialen HTTP handshake geben, ausgelöst vom Client an den Server.",
          "Der User muss sich zuerst am Server authentifizieren.",
          "Die Webapplikation muss zuerst per OAuth2 eine Berechtigung erhalten.",
          "Der User muss im Browser zuerst die Websocket‐Berechtigung erteilen."
        ],
        "correctAnswers": [
          "Es muss einen initialen HTTP handshake geben, ausgelöst vom Client an den Server."
        ]
      },
      {
        "questionText": "Welche der folgenden Anwendungen wären besonders gut mit Websockets umzusetzen?",
        "options": [
          "Chat‐Applikationen",
          "Kanban‐Board‐Applikationen",
          "Newsfeed‐Applikationen",
          "Screen‐Sharing‐Applikationen"
        ],
        "correctAnswers": [
          "Chat‐Applikationen",
          "Kanban‐Board‐Applikationen",
          "Newsfeed‐Applikationen"
        ]
      },
      {
        "questionText": "Was ist Socket.IO?",
        "options": [
          "Socket.IO ist eine Javascript Bibliothek für Serverseite und Clientseite zur Nutzung von Websockets.",
          "Socket.IO ist eine VanillaJS API für die Nutzung von Websockets am Client.",
          "Socket.IO ist ein Protokoll Standard für Kommunikation über Websockets.",
          "Socket.IO ist ein Plugin für ExpressJS zur Nutzung von Websockets."
        ],
        "correctAnswers": [
          "Socket.IO ist eine Javascript Bibliothek für Serverseite und Clientseite zur Nutzung von Websockets."
        ]
      },
      {
        "questionText": "Wofür steht die Abkürzung IPC?",
        "options": [
          "Inter‐process communication",
          "Internet progressive communication",
          "International Protocol for computing",
          "International process‐computing"
        ],
        "correctAnswers": [
          "Inter‐process communication"
        ]
      },
      {
        "questionText": "Welchen Mechanismus beschreibt IPC?",
        "options": [
          "IPC bezeichnet das Verfahren, wie Datenaustausch zwischen verschiedenen Prozessen funktioniert.",
          "Mit Hilfe von IPC werden Schnittstellen zwischen Servern definiert.",
          "Das User‐Interface wird mit IPC beschrieben und standardisiert.",
          "Die Art wie Javascript‐Code in HTML eingebettet wird, wird im IPC festgeschrieben."
        ],
        "correctAnswers": [
          "IPC bezeichnet das Verfahren, wie Datenaustausch zwischen verschiedenen Prozessen funktioniert."
        ]
      },
      {
        "questionText": "Was versteht man unter „eventdriven“ zu programmieren?",
        "options": [
          "Funktionen werden als Eventhandler angelegt und mittels einem Event getriggered.",
          "Eventhandler müssen selbst definiert werden für alle User‐Ereignisse.",
          "Eventdriven zu programmieren ist das Gegenteil von objektorientierter Programmierung.",
          "Alle Funktionen, die über Events getriggered werden, dürfen keine Parameter enthalten."
        ],
        "correctAnswers": [
          "Funktionen werden als Eventhandler angelegt und mittels einem Event getriggered."
        ]
      },
      {
        "questionText": "Was benötigen Sie, um „eventdriven“ in NodeJS zu programmieren?",
        "options": [
          "den EventEmitter aus dem Module events",
          "einen http‐Server, damit Events eingehen können",
          "in NodeJS kann nicht „eventdriven“ programmiert werden, da Ereignisse nur am Client ausgelöst werden",
          "das Modul ExpressJS, um entsprechende Routen einrichten zu können"
        ],
        "correctAnswers": [
          "den EventEmitter aus dem Module events"
        ]
      },
      {
        "questionText": "Welcher Code ist “eventdriven” umgesetzt? const EventEmitter = require( \"events\" ); const myEv = new EventEmitter();",
        "options": [
          "myEv.on( \"request\", ()=>{ /*...*/ } ); myEv.emit( \"request\" );",
          "myEv.onrequest = ()=>{ /*...*/ }; myEv.request();",
          "myEv.on( \"request\" ); myEv.request = ()=> { /*...*/ };",
          "myEv.addEventListener( \"request\", ()=>{ /*...*/ } ); request.trigger();"
        ],
        "correctAnswers": [
          "myEv.on( \"request\", ()=>{ /*...*/ } ); myEv.emit( \"request\" );"
        ]
      }                               
    ]